<?php
/**
 * ChatsApi
 * PHP version 5
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Leadball messaging service - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.25.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sallfris\Leadball\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use sallfris\Leadball\Client\ApiException;
use sallfris\Leadball\Client\Configuration;
use sallfris\Leadball\Client\HeaderSelector;
use sallfris\Leadball\Client\ObjectSerializer;
use Symfony\Component\Filesystem\Exception\FileNotFoundException;

/**
 * ChatsApi Class Doc Comment
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChatsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    
    /**
     * @var Configuration
     */
    protected $config;
    
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    
    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration   $config = null,
        HeaderSelector  $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }
    
    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    
    /**
     * Operation createChat
     *
     * Create a chat
     *
     * @param \sallfris\Leadball\Client\Model\CreateChatDto $body Create a chat (required)
     *
     * @return \sallfris\Leadball\Client\Model\Chat
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function createChat($body)
    {
        [$response] = $this->createChatWithHttpInfo($body);
        return $response;
    }
    
    /**
     * Operation createChatWithHttpInfo
     *
     * Create a chat
     *
     * @param \sallfris\Leadball\Client\Model\CreateChatDto $body Create a chat (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Chat, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function createChatWithHttpInfo($body)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Chat';
        $request = $this->createChatRequest($body);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Chat',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation createChatAsync
     *
     * Create a chat
     *
     * @param \sallfris\Leadball\Client\Model\CreateChatDto $body Create a chat (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createChatAsync($body)
    {
        return $this->createChatAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation createChatAsyncWithHttpInfo
     *
     * Create a chat
     *
     * @param \sallfris\Leadball\Client\Model\CreateChatDto $body Create a chat (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createChatAsyncWithHttpInfo($body)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Chat';
        $request = $this->createChatRequest($body);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'createChat'
     *
     * @param \sallfris\Leadball\Client\Model\CreateChatDto $body Create a chat (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function createChatRequest(\sallfris\Leadball\Client\Model\CreateChatDto $body)
    {
        $resourcePath = '/chats';
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        
        $httpBody = \GuzzleHttp\json_encode($body);
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation deleteChat
     *
     * Delete chat
     *
     * @param int $chatId Id of chat to delete (required)
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function deleteChat($chatId)
    {
        $this->deleteChatWithHttpInfo($chatId);
    }
    
    /**
     * Operation deleteChatWithHttpInfo
     *
     * Delete chat
     *
     * @param int $chatId Id of chat to delete (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function deleteChatWithHttpInfo($chatId)
    {
        $request = $this->deleteChatRequest($chatId);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation deleteChatAsync
     *
     * Delete chat
     *
     * @param int $chatId Id of chat to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function deleteChatAsync($chatId)
    {
        return $this->deleteChatAsyncWithHttpInfo($chatId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation deleteChatAsyncWithHttpInfo
     *
     * Delete chat
     *
     * @param int $chatId Id of chat to delete (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function deleteChatAsyncWithHttpInfo($chatId)
    {
        $request = $this->deleteChatRequest($chatId);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'deleteChat'
     *
     * @param int $chatId Id of chat to delete (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function deleteChatRequest(int $chatId)
    {
        $resourcePath = '/chats/{chatId}';
        $httpBody = '';
        
        $resourcePath = str_replace(
            '{' . 'chatId' . '}',
            ObjectSerializer::toPathValue($chatId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            [],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findAllAttachments
     *
     * Find all chat attachments
     *
     * @param int $chatId Id of the chat where attachments are being searched (required)
     * @param string $type The type of attachments we are looking for (optional)
     *
     * @return \sallfris\Leadball\Client\Model\Attachment[]
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function findAllAttachments($chatId, $type = null)
    {
        [$response] = $this->findAllAttachmentsWithHttpInfo($chatId, $type);
        return $response;
    }
    
    /**
     * Operation findAllAttachmentsWithHttpInfo
     *
     * Find all chat attachments
     *
     * @param int $chatId Id of the chat where attachments are being searched (required)
     * @param string $type The type of attachments we are looking for (optional)
     *
     * @return array of \sallfris\Leadball\Client\Model\Attachment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function findAllAttachmentsWithHttpInfo($chatId, $type = null)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Attachment[]';
        $request = $this->findAllAttachmentsRequest($chatId, $type);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Attachment[]',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findAllAttachmentsAsync
     *
     * Find all chat attachments
     *
     * @param int $chatId Id of the chat where attachments are being searched (required)
     * @param string $type The type of attachments we are looking for (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function findAllAttachmentsAsync($chatId, $type = null)
    {
        return $this->findAllAttachmentsAsyncWithHttpInfo($chatId, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findAllAttachmentsAsyncWithHttpInfo
     *
     * Find all chat attachments
     *
     * @param int $chatId Id of the chat where attachments are being searched (required)
     * @param string $type The type of attachments we are looking for (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function findAllAttachmentsAsyncWithHttpInfo($chatId, $type = null)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Attachment[]';
        $request = $this->findAllAttachmentsRequest($chatId, $type);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findAllAttachments'
     *
     * @param int $chatId Id of the chat where attachments are being searched (required)
     * @param string $type The type of attachments we are looking for (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function findAllAttachmentsRequest(int $chatId, $type = null)
    {
        $resourcePath = '/chats/{chatId}/attachments';
        $queryParams = [];
        $httpBody = '';
        
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        
        $resourcePath = str_replace(
            '{' . 'chatId' . '}',
            ObjectSerializer::toPathValue($chatId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findAllChats
     *
     * Find all chats
     *
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return \sallfris\Leadball\Client\Model\Chat[]
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function findAllChats($offset, $limit)
    {
        [$response] = $this->findAllChatsWithHttpInfo($offset, $limit);
        return $response;
    }
    
    /**
     * Operation findAllChatsWithHttpInfo
     *
     * Find all chats
     *
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Chat[], HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function findAllChatsWithHttpInfo($offset, $limit)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Chat[]';
        $request = $this->findAllChatsRequest($offset, $limit);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Chat[]',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findAllChatsAsync
     *
     * Find all chats
     *
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function findAllChatsAsync($offset, $limit)
    {
        return $this->findAllChatsAsyncWithHttpInfo($offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findAllChatsAsyncWithHttpInfo
     *
     * Find all chats
     *
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function findAllChatsAsyncWithHttpInfo($offset, $limit)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Chat[]';
        $request = $this->findAllChatsRequest($offset, $limit);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findAllChats'
     *
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function findAllChatsRequest(int $offset, int $limit)
    {
        $resourcePath = '/chats';
        $queryParams = [];
        $httpBody = '';
        
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findOneChat
     *
     * Find chat by id
     *
     * @param int $chatId Id of chat to return (required)
     *
     * @return \sallfris\Leadball\Client\Model\Chat
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function findOneChat($chatId)
    {
        [$response] = $this->findOneChatWithHttpInfo($chatId);
        return $response;
    }
    
    /**
     * Operation findOneChatWithHttpInfo
     *
     * Find chat by id
     *
     * @param int $chatId Id of chat to return (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Chat, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function findOneChatWithHttpInfo($chatId)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Chat';
        $request = $this->findOneChatRequest($chatId);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Chat',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findOneChatAsync
     *
     * Find chat by id
     *
     * @param int $chatId Id of chat to return (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function findOneChatAsync($chatId)
    {
        return $this->findOneChatAsyncWithHttpInfo($chatId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findOneChatAsyncWithHttpInfo
     *
     * Find chat by id
     *
     * @param int $chatId Id of chat to return (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function findOneChatAsyncWithHttpInfo($chatId)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Chat';
        $request = $this->findOneChatRequest($chatId);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findOneChat'
     *
     * @param int $chatId Id of chat to return (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function findOneChatRequest(int $chatId)
    {
        $resourcePath = '/chats/{chatId}';
        $httpBody = '';
        
        $resourcePath = str_replace(
            '{' . 'chatId' . '}',
            ObjectSerializer::toPathValue($chatId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation importChats
     *
     * Importing chats
     *
     * @param \sallfris\Leadball\Client\Model\ImportChatsDto[] $body Importing chats (required)
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function importChats($body)
    {
        $this->importChatsWithHttpInfo($body);
    }
    
    /**
     * Operation importChatsWithHttpInfo
     *
     * Importing chats
     *
     * @param \sallfris\Leadball\Client\Model\ImportChatsDto[] $body Importing chats (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function importChatsWithHttpInfo($body)
    {
        $request = $this->importChatsRequest($body);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation importChatsAsync
     *
     * Importing chats
     *
     * @param \sallfris\Leadball\Client\Model\ImportChatsDto[] $body Importing chats (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function importChatsAsync($body)
    {
        return $this->importChatsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation importChatsAsyncWithHttpInfo
     *
     * Importing chats
     *
     * @param \sallfris\Leadball\Client\Model\ImportChatsDto[] $body Importing chats (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function importChatsAsyncWithHttpInfo($body)
    {
        $request = $this->importChatsRequest($body);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'importChats'
     *
     * @param \sallfris\Leadball\Client\Model\ImportChatsDto[] $body Importing chats (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function importChatsRequest(array $body)
    {
        // verify the required parameter 'body' is set
        if (empty($body)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling importChats'
            );
        }
        
        $resourcePath = '/chats/import';
    
        $headers = $this->headerSelector->selectHeaders(
            [],
            ['application/json']
        );
        // $_tempBody is the method argument, if present
        $httpBody = $body;
        // \stdClass has no __toString(), so we should encode it manually
        if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($httpBody);
        }
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');
            if (!$options[RequestOptions::DEBUG]) {
                throw new FileNotFoundException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        
        return $options;
    }
}
