<?php
/**
 * ChannelsApi
 * PHP version 5
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Docs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.27.08
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sallfris\Leadball\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use sallfris\Leadball\Client\ApiException;
use sallfris\Leadball\Client\Configuration;
use sallfris\Leadball\Client\HeaderSelector;

/**
 * ChannelsApi Class Doc Comment
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChannelsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    
    /**
     * @var Configuration
     */
    protected $config;
    
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    
    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration   $config = null,
        HeaderSelector  $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }
    
    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    
    /**
     * Operation apiChannelsGet
     *
     * Find all channels
     *
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsGet()
    {
        $this->apiChannelsGetWithHttpInfo();
    }
    
    /**
     * Operation apiChannelsGetWithHttpInfo
     *
     * Find all channels
     *
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsGetWithHttpInfo()
    {
        $request = $this->apiChannelsGetRequest();
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation apiChannelsGetAsync
     *
     * Find all channels
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsGetAsync()
    {
        return $this->apiChannelsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation apiChannelsGetAsyncWithHttpInfo
     *
     * Find all channels
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsGetAsyncWithHttpInfo()
    {
        $request = $this->apiChannelsGetRequest();
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'apiChannelsGet'
     *
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function apiChannelsGetRequest()
    {
        
        $resourcePath = '/api/channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        
        
        // body params
        $tempBody = null;
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }
        
        // for model (json/xml)
        if (isset($tempBody)) {
            // $tempBody is the method argument, if present
            $httpBody = $tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
                
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
                
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation apiChannelsPost
     *
     * Create new channel
     *
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsPost()
    {
        $this->apiChannelsPostWithHttpInfo();
    }
    
    /**
     * Operation apiChannelsPostWithHttpInfo
     *
     * Create new channel
     *
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsPostWithHttpInfo()
    {
        $request = $this->apiChannelsPostRequest();
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation apiChannelsPostAsync
     *
     * Create new channel
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsPostAsync()
    {
        return $this->apiChannelsPostAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation apiChannelsPostAsyncWithHttpInfo
     *
     * Create new channel
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsPostAsyncWithHttpInfo()
    {
        $request = $this->apiChannelsPostRequest();
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'apiChannelsPost'
     *
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function apiChannelsPostRequest()
    {
        
        $resourcePath = '/api/channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        
        
        // body params
        $tempBody = null;
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }
        
        // for model (json/xml)
        if (isset($tempBody)) {
            // $tempBody is the method argument, if present
            $httpBody = $tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
                
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
                
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation apiChannelsidDelete
     *
     * Delete channel
     *
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsidDelete()
    {
        $this->apiChannelsidDeleteWithHttpInfo();
    }
    
    /**
     * Operation apiChannelsidDeleteWithHttpInfo
     *
     * Delete channel
     *
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsidDeleteWithHttpInfo()
    {
        $request = $this->apiChannelsidDeleteRequest();
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation apiChannelsidDeleteAsync
     *
     * Delete channel
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsidDeleteAsync()
    {
        return $this->apiChannelsidDeleteAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation apiChannelsidDeleteAsyncWithHttpInfo
     *
     * Delete channel
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsidDeleteAsyncWithHttpInfo()
    {
        $request = $this->apiChannelsidDeleteRequest();
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'apiChannelsidDelete'
     *
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function apiChannelsidDeleteRequest()
    {
        
        $resourcePath = '/api/channels/:id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        
        
        // body params
        $tempBody = null;
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }
        
        // for model (json/xml)
        if (isset($tempBody)) {
            // $tempBody is the method argument, if present
            $httpBody = $tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
                
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
                
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation apiChannelsidGet
     *
     * Find channel by id
     *
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsidGet()
    {
        $this->apiChannelsidGetWithHttpInfo();
    }
    
    /**
     * Operation apiChannelsidGetWithHttpInfo
     *
     * Find channel by id
     *
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsidGetWithHttpInfo()
    {
        $request = $this->apiChannelsidGetRequest();
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation apiChannelsidGetAsync
     *
     * Find channel by id
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsidGetAsync()
    {
        return $this->apiChannelsidGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation apiChannelsidGetAsyncWithHttpInfo
     *
     * Find channel by id
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsidGetAsyncWithHttpInfo()
    {
        $request = $this->apiChannelsidGetRequest();
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'apiChannelsidGet'
     *
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function apiChannelsidGetRequest()
    {
        
        $resourcePath = '/api/channels/:id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        
        
        // body params
        $tempBody = null;
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }
        
        // for model (json/xml)
        if (isset($tempBody)) {
            // $tempBody is the method argument, if present
            $httpBody = $tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
                
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
                
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation apiChannelsidPut
     *
     * Update channel
     *
     *
     * @return void
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsidPut()
    {
        $this->apiChannelsidPutWithHttpInfo();
    }
    
    /**
     * Operation apiChannelsidPutWithHttpInfo
     *
     * Update channel
     *
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \sallfris\Leadball\Client\ApiException on non-2xx response
     */
    public function apiChannelsidPutWithHttpInfo()
    {
        $request = $this->apiChannelsidPutRequest();
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation apiChannelsidPutAsync
     *
     * Update channel
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsidPutAsync()
    {
        return $this->apiChannelsidPutAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation apiChannelsidPutAsyncWithHttpInfo
     *
     * Update channel
     *
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function apiChannelsidPutAsyncWithHttpInfo()
    {
        $request = $this->apiChannelsidPutRequest();
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'apiChannelsidPut'
     *
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    protected function apiChannelsidPutRequest()
    {
        
        $resourcePath = '/api/channels/:id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        
        
        // body params
        $tempBody = null;
        
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }
        
        // for model (json/xml)
        if (isset($tempBody)) {
            // $tempBody is the method argument, if present
            $httpBody = $tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
                
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
                
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );
        
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \InvalidArgumentException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        
        return $options;
    }
}
