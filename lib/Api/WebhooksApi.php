<?php
/**
 * WebhooksApi
 * PHP version 5
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Leadball messaging service - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.25.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sallfris\Leadball\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use sallfris\Leadball\Client\ApiException;
use sallfris\Leadball\Client\Configuration;
use sallfris\Leadball\Client\HeaderSelector;
use sallfris\Leadball\Client\Model\CreateWebhookDto;
use sallfris\Leadball\Client\Model\Webhook;
use sallfris\Leadball\Client\ObjectSerializer;
use stdClass;
use Symfony\Component\Filesystem\Exception\FileNotFoundException;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    
    /**
     * @var Configuration
     */
    protected $config;
    
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    
    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration   $config = null,
        HeaderSelector  $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }
    
    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    
    /**
     * Operation createWebhook
     *
     * Create a webhook
     *
     * @param CreateWebhookDto $body Create a webhook (required)
     *
     * @return Webhook
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function createWebhook($body)
    {
        [$response] = $this->createWebhookWithHttpInfo($body);
        return $response;
    }
    
    /**
     * Operation createWebhookWithHttpInfo
     *
     * Create a webhook
     *
     * @param CreateWebhookDto $body Create a webhook (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function createWebhookWithHttpInfo($body)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook';
        $request = $this->createWebhookRequest($body);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 201) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Webhook',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation createWebhookAsync
     *
     * Create a webhook
     *
     * @param CreateWebhookDto $body Create a webhook (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function createWebhookAsync($body)
    {
        return $this->createWebhookAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation createWebhookAsyncWithHttpInfo
     *
     * Create a webhook
     *
     * @param CreateWebhookDto $body Create a webhook (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function createWebhookAsyncWithHttpInfo($body)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook';
        $request = $this->createWebhookRequest($body);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'createWebhook'
     *
     * @param CreateWebhookDto $body Create a webhook (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function createWebhookRequest(CreateWebhookDto $body)
    {
        $resourcePath = '/webhooks';
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        
        $httpBody = $body;
        // \stdClass has no __toString(), so we should encode it manually
        if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($httpBody);
        }
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation deleteWebhook
     *
     * Delete a webhook
     *
     * @param int $webhookId Webhook id to delete (required)
     *
     * @return void
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function deleteWebhook($webhookId)
    {
        $this->deleteWebhookWithHttpInfo($webhookId);
    }
    
    /**
     * Operation deleteWebhookWithHttpInfo
     *
     * Delete a webhook
     *
     * @param int $webhookId Webhook id to delete (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function deleteWebhookWithHttpInfo($webhookId)
    {
        $request = $this->deleteWebhookRequest($webhookId);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            return [null, $statusCode, $response->getHeaders()];
            
        } catch (ApiException $e) {
            error_log($e->getMessage());
            throw $e;
        }
    }
    
    /**
     * Operation deleteWebhookAsync
     *
     * Delete a webhook
     *
     * @param int $webhookId Webhook id to delete (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function deleteWebhookAsync($webhookId)
    {
        return $this->deleteWebhookAsyncWithHttpInfo($webhookId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation deleteWebhookAsyncWithHttpInfo
     *
     * Delete a webhook
     *
     * @param int $webhookId Webhook id to delete (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function deleteWebhookAsyncWithHttpInfo($webhookId)
    {
        $request = $this->deleteWebhookRequest($webhookId);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'deleteWebhook'
     *
     * @param int $webhookId Webhook id to delete (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function deleteWebhookRequest(int $webhookId)
    {
        $resourcePath = '/webhooks/{webhookId}';
        $httpBody = '';
        
        $resourcePath = str_replace(
            '{' . 'webhookId' . '}',
            ObjectSerializer::toPathValue($webhookId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            [],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findAllWebhooks
     *
     * Find all webhooks
     *
     *
     * @return Webhook[]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findAllWebhooks()
    {
        [$response] = $this->findAllWebhooksWithHttpInfo();
        return $response;
    }
    
    /**
     * Operation findAllWebhooksWithHttpInfo
     *
     * Find all webhooks
     *
     *
     * @return array of \sallfris\Leadball\Client\Model\Webhook[], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findAllWebhooksWithHttpInfo()
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook[]';
        $request = $this->findAllWebhooksRequest();
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Webhook[]',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findAllWebhooksAsync
     *
     * Find all webhooks
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findAllWebhooksAsync()
    {
        return $this->findAllWebhooksAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findAllWebhooksAsyncWithHttpInfo
     *
     * Find all webhooks
     *
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findAllWebhooksAsyncWithHttpInfo()
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook[]';
        $request = $this->findAllWebhooksRequest();
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findAllWebhooks'
     *
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function findAllWebhooksRequest()
    {
        $resourcePath = '/webhooks';
        $httpBody = '';
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findOneWebhook
     *
     * Find webhook by id
     *
     * @param int $webhookId Id of webhook to return (required)
     *
     * @return Webhook
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findOneWebhook($webhookId)
    {
        [$response] = $this->findOneWebhookWithHttpInfo($webhookId);
        return $response;
    }
    
    /**
     * Operation findOneWebhookWithHttpInfo
     *
     * Find webhook by id
     *
     * @param int $webhookId Id of webhook to return (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findOneWebhookWithHttpInfo($webhookId)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook';
        $request = $this->findOneWebhookRequest($webhookId);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Webhook',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findOneWebhookAsync
     *
     * Find webhook by id
     *
     * @param int $webhookId Id of webhook to return (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findOneWebhookAsync($webhookId)
    {
        return $this->findOneWebhookAsyncWithHttpInfo($webhookId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findOneWebhookAsyncWithHttpInfo
     *
     * Find webhook by id
     *
     * @param int $webhookId Id of webhook to return (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findOneWebhookAsyncWithHttpInfo($webhookId)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook';
        $request = $this->findOneWebhookRequest($webhookId);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findOneWebhook'
     *
     * @param int $webhookId Id of webhook to return (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function findOneWebhookRequest(int $webhookId)
    {
        $resourcePath = '/webhooks/{webhookId}';
        $httpBody = '';
        
        $resourcePath = str_replace(
            '{' . 'webhookId' . '}',
            ObjectSerializer::toPathValue($webhookId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation updateWebhook
     *
     * Update a webhook
     *
     * @param int $webhookId Id of webhook that needs to be updated (required)
     * @param CreateWebhookDto $body Update a hsm (optional)
     *
     * @return Webhook
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateWebhook($webhookId, $body = null)
    {
        [$response] = $this->updateWebhookWithHttpInfo($webhookId, $body);
        return $response;
    }
    
    /**
     * Operation updateWebhookWithHttpInfo
     *
     * Update a webhook
     *
     * @param int $webhookId Id of webhook that needs to be updated (required)
     * @param CreateWebhookDto $body Update a hsm (optional)
     *
     * @return array of \sallfris\Leadball\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function updateWebhookWithHttpInfo($webhookId, $body = null)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook';
        $request = $this->updateWebhookRequest($webhookId, $body);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Webhook',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation updateWebhookAsync
     *
     * Update a webhook
     *
     * @param int $webhookId Id of webhook that needs to be updated (required)
     * @param CreateWebhookDto $body Update a hsm (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateWebhookAsync($webhookId, $body = null)
    {
        return $this->updateWebhookAsyncWithHttpInfo($webhookId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation updateWebhookAsyncWithHttpInfo
     *
     * Update a webhook
     *
     * @param int $webhookId Id of webhook that needs to be updated (required)
     * @param CreateWebhookDto $body Update a hsm (optional)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function updateWebhookAsyncWithHttpInfo($webhookId, $body = null)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Webhook';
        $request = $this->updateWebhookRequest($webhookId, $body);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'updateWebhook'
     *
     * @param int $webhookId Id of webhook that needs to be updated (required)
     * @param CreateWebhookDto $body Update a hsm (optional)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function updateWebhookRequest(int $webhookId, CreateWebhookDto $body)
    {
        $resourcePath = '/webhooks/{webhookId}';
        
        $resourcePath = str_replace(
            '{' . 'webhookId' . '}',
            ObjectSerializer::toPathValue($webhookId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        
        $httpBody = $body;
        // \stdClass has no __toString(), so we should encode it manually
        if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($httpBody);
        }
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws FileNotFoundException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');
            if (!$options[RequestOptions::DEBUG]) {
                throw new FileNotFoundException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        
        return $options;
    }
}
