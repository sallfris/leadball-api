<?php
/**
 * MessagesApi
 * PHP version 5
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Leadball messaging service - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.25.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sallfris\Leadball\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InvalidArgumentException;
use sallfris\Leadball\Client\ApiException;
use sallfris\Leadball\Client\Configuration;
use sallfris\Leadball\Client\HeaderSelector;
use sallfris\Leadball\Client\Model\CreateMessageDto;
use sallfris\Leadball\Client\Model\InlineResponse200;
use sallfris\Leadball\Client\Model\Message;
use sallfris\Leadball\Client\Model\ReadMessagesDto;
use sallfris\Leadball\Client\ObjectSerializer;
use stdClass;
use Symfony\Component\Filesystem\Exception\FileNotFoundException;
use function GuzzleHttp\Psr7\build_query;

/**
 * MessagesApi Class Doc Comment
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;
    
    /**
     * @var Configuration
     */
    protected $config;
    
    /**
     * @var HeaderSelector
     */
    protected $headerSelector;
    
    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration   $config = null,
        HeaderSelector  $selector = null
    )
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }
    
    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    
    /**
     * Operation createMessage
     *
     * Create a message
     *
     * @param CreateMessageDto $body Create a message (required)
     * @param int $chatId Id of the chat to which the message is being sent (required)
     *
     * @return Message
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function createMessage($body, $chatId)
    {
        [$response] = $this->createMessageWithHttpInfo($body, $chatId);
        return $response;
    }
    
    /**
     * Operation createMessageWithHttpInfo
     *
     * Create a message
     *
     * @param CreateMessageDto $body Create a message (required)
     * @param int $chatId Id of the chat to which the message is being sent (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Message, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function createMessageWithHttpInfo($body, $chatId)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Message';
        $request = $this->createMessageRequest($body, $chatId);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Message',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation createMessageAsync
     *
     * Create a message
     *
     * @param CreateMessageDto $body Create a message (required)
     * @param int $chatId Id of the chat to which the message is being sent (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function createMessageAsync($body, $chatId)
    {
        return $this->createMessageAsyncWithHttpInfo($body, $chatId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation createMessageAsyncWithHttpInfo
     *
     * Create a message
     *
     * @param CreateMessageDto $body Create a message (required)
     * @param int $chatId Id of the chat to which the message is being sent (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function createMessageAsyncWithHttpInfo($body, $chatId)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Message';
        $request = $this->createMessageRequest($body, $chatId);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'createMessage'
     *
     * @param CreateMessageDto $body Create a message (required)
     * @param int $chatId Id of the chat to which the message is being sent (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function createMessageRequest(CreateMessageDto $body, int $chatId)
    {
        $resourcePath = '/chats/{chatId}/messages';
        
        $resourcePath = str_replace(
            '{' . 'chatId' . '}',
            ObjectSerializer::toPathValue($chatId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        
        $httpBody = $body;
        // \stdClass has no __toString(), so we should encode it manually
        if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($httpBody);
        }
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findAllMessages
     *
     * Find a messages
     *
     * @param int $chatId Id of channel to return (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return Message
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findAllMessages($chatId, $offset, $limit)
    {
        [$response] = $this->findAllMessagesWithHttpInfo($chatId, $offset, $limit);
        return $response;
    }
    
    /**
     * Operation findAllMessagesWithHttpInfo
     *
     * Find a messages
     *
     * @param int $chatId Id of channel to return (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Message, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findAllMessagesWithHttpInfo($chatId, $offset, $limit)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Message';
        $request = $this->findAllMessagesRequest($chatId, $offset, $limit);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Message',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findAllMessagesAsync
     *
     * Find a messages
     *
     * @param int $chatId Id of channel to return (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findAllMessagesAsync($chatId, $offset, $limit)
    {
        return $this->findAllMessagesAsyncWithHttpInfo($chatId, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findAllMessagesAsyncWithHttpInfo
     *
     * Find a messages
     *
     * @param int $chatId Id of channel to return (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findAllMessagesAsyncWithHttpInfo($chatId, $offset, $limit)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Message';
        $request = $this->findAllMessagesRequest($chatId, $offset, $limit);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findAllMessages'
     *
     * @param int $chatId Id of channel to return (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function findAllMessagesRequest(int $chatId, int $offset, int $limit)
    {
        $resourcePath = '/chats/{chatId}/messages';
        $queryParams = [];
        $httpBody = '';
        
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        
        $resourcePath = str_replace(
            '{' . 'chatId' . '}',
            ObjectSerializer::toPathValue($chatId),
            $resourcePath
        );
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation findAllMessagesByQuery
     *
     * Find all messages by query
     *
     * @param string $query Search query (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return Message[][]
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findAllMessagesByQuery($query, $offset, $limit)
    {
        [$response] = $this->findAllMessagesByQueryWithHttpInfo($query, $offset, $limit);
        return $response;
    }
    
    /**
     * Operation findAllMessagesByQueryWithHttpInfo
     *
     * Find all messages by query
     *
     * @param string $query Search query (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\Message[][], HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function findAllMessagesByQueryWithHttpInfo($query, $offset, $limit)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Message[][]';
        $request = $this->findAllMessagesByQueryRequest($query, $offset, $limit);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\Message[][]',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation findAllMessagesByQueryAsync
     *
     * Find all messages by query
     *
     * @param string $query Search query (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findAllMessagesByQueryAsync($query, $offset, $limit)
    {
        return $this->findAllMessagesByQueryAsyncWithHttpInfo($query, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation findAllMessagesByQueryAsyncWithHttpInfo
     *
     * Find all messages by query
     *
     * @param string $query Search query (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function findAllMessagesByQueryAsyncWithHttpInfo($query, $offset, $limit)
    {
        $returnType = '\sallfris\Leadball\Client\Model\Message[][]';
        $request = $this->findAllMessagesByQueryRequest($query, $offset, $limit);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'findAllMessagesByQuery'
     *
     * @param string $query Search query (required)
     * @param int $offset Offset (required)
     * @param int $limit Limit (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function findAllMessagesByQueryRequest(string $query, int $offset, int $limit)
    {
        $resourcePath = '/chats/search';
        $queryParams = [];
        $httpBody = '';
        
        $queryParams['query'] = ObjectSerializer::toQueryValue($query, null);
        $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            []
        );
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        $query = build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
    
    /**
     * Operation readMessages
     *
     * Read messages
     *
     * @param ReadMessagesDto $body Read messages (required)
     *
     * @return InlineResponse200
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function readMessages($body)
    {
        [$response] = $this->readMessagesWithHttpInfo($body);
        return $response;
    }
    
    /**
     * Operation readMessagesWithHttpInfo
     *
     * Read messages
     *
     * @param ReadMessagesDto $body Read messages (required)
     *
     * @return array of \sallfris\Leadball\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws InvalidArgumentException
     * @throws ApiException on non-2xx response
     */
    public function readMessagesWithHttpInfo($body)
    {
        $returnType = '\sallfris\Leadball\Client\Model\InlineResponse200';
        $request = $this->readMessagesRequest($body);
        
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }
            
            $statusCode = $response->getStatusCode();
            
            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }
            
            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
            
        } catch (ApiException $e) {
            if ($e->getCode() == 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\sallfris\Leadball\Client\Model\InlineResponse200',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }
            throw $e;
        }
    }
    
    /**
     * Operation readMessagesAsync
     *
     * Read messages
     *
     * @param ReadMessagesDto $body Read messages (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function readMessagesAsync($body)
    {
        return $this->readMessagesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }
    
    /**
     * Operation readMessagesAsyncWithHttpInfo
     *
     * Read messages
     *
     * @param ReadMessagesDto $body Read messages (required)
     *
     * @return PromiseInterface
     * @throws InvalidArgumentException
     */
    public function readMessagesAsyncWithHttpInfo($body)
    {
        $returnType = '\sallfris\Leadball\Client\Model\InlineResponse200';
        $request = $this->readMessagesRequest($body);
        
        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }
    
    /**
     * Create request for operation 'readMessages'
     *
     * @param ReadMessagesDto $body Read messages (required)
     *
     * @return Request
     * @throws InvalidArgumentException
     */
    protected function readMessagesRequest(ReadMessagesDto $body)
    {
        $resourcePath = '/batch/messages/read';
        
        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            ['application/json']
        );
        
        $httpBody = $body;
        // \stdClass has no __toString(), so we should encode it manually
        if ($httpBody instanceof stdClass && $headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($httpBody);
        }
        
        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        
        $headers = array_merge(
            $defaultHeaders,
            $headers
        );
        
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
    }
    
    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws FileNotFoundException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'ab');
            if (!$options[RequestOptions::DEBUG]) {
                throw new FileNotFoundException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        
        return $options;
    }
}
