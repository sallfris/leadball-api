<?php
/**
 * SubmitHsmForApprovalDtoMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Leadball messaging service - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.25.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sallfris\Leadball\Client\Model;

use ArrayAccess;
use JsonException;
use sallfris\Leadball\Client\ObjectSerializer;

/**
 * SubmitHsmForApprovalDtoMeta Class Doc Comment
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubmitHsmForApprovalDtoMeta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SubmitHsmForApprovalDto_meta';
    
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'language_code' => 'string',
        'category' => 'string',
        'vertical' => 'string',
        'template_type' => 'string',
        'example' => 'string',
        'example_media' => 'string',
        'enable_sample' => 'bool'];
    
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'language_code' => null,
        'category' => null,
        'vertical' => null,
        'template_type' => null,
        'example' => null,
        'example_media' => null,
        'enable_sample' => null];
    
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }
    
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }
    
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language_code' => 'languageCode',
        'category' => 'category',
        'vertical' => 'vertical',
        'template_type' => 'templateType',
        'example' => 'example',
        'example_media' => 'exampleMedia',
        'enable_sample' => 'enableSample'];
    
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language_code' => 'setLanguageCode',
        'category' => 'setCategory',
        'vertical' => 'setVertical',
        'template_type' => 'setTemplateType',
        'example' => 'setExample',
        'example_media' => 'setExampleMedia',
        'enable_sample' => 'setEnableSample'];
    
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language_code' => 'getLanguageCode',
        'category' => 'getCategory',
        'vertical' => 'getVertical',
        'template_type' => 'getTemplateType',
        'example' => 'getExample',
        'example_media' => 'getExampleMedia',
        'enable_sample' => 'getEnableSample'];
    
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }
    
    const CATEGORY_TRANSACTIONAL = 'TRANSACTIONAL';
    const CATEGORY_MARKETING = 'MARKETING';
    const CATEGORY_OTP = 'OTP';
    const TEMPLATE_TYPE_TEXT = 'TEXT';
    const TEMPLATE_TYPE_IMAGE = 'IMAGE';
    const TEMPLATE_TYPE_DOCUMENT = 'DOCUMENT';
    const TEMPLATE_TYPE_VIDEO = 'VIDEO';
    const TEMPLATE_TYPE_LOCATION = 'LOCATION';
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_TRANSACTIONAL,
            self::CATEGORY_MARKETING,
            self::CATEGORY_OTP,];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTemplateTypeAllowableValues()
    {
        return [
            self::TEMPLATE_TYPE_TEXT,
            self::TEMPLATE_TYPE_IMAGE,
            self::TEMPLATE_TYPE_DOCUMENT,
            self::TEMPLATE_TYPE_VIDEO,
            self::TEMPLATE_TYPE_LOCATION,];
    }
    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    
    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['vertical'] = isset($data['vertical']) ? $data['vertical'] : null;
        $this->container['template_type'] = isset($data['template_type']) ? $data['template_type'] : null;
        $this->container['example'] = isset($data['example']) ? $data['example'] : null;
        $this->container['example_media'] = isset($data['example_media']) ? $data['example_media'] : null;
        $this->container['enable_sample'] = isset($data['enable_sample']) ? $data['enable_sample'] : null;
    }
    
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }
        
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($this->container['template_type']) && !in_array(
                $this->container['template_type'],
                $allowedValues,
                true
            )) {
            $invalidProperties[] = sprintf(
                "invalid value for 'template_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }
        
        return $invalidProperties;
    }
    
    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }
    
    
    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }
    
    /**
     * Sets language_code
     *
     * @param string $languageCode language_code
     *
     * @return $this
     */
    public function setLanguageCode($languageCode)
    {
        $this->container['language_code'] = $languageCode;
        
        return $this;
    }
    
    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }
    
    /**
     * Sets category
     *
     * @param string $category Category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;
        
        return $this;
    }
    
    /**
     * Gets vertical
     *
     * @return string
     */
    public function getVertical()
    {
        return $this->container['vertical'];
    }
    
    /**
     * Sets vertical
     *
     * @param string $vertical vertical
     *
     * @return $this
     */
    public function setVertical($vertical)
    {
        $this->container['vertical'] = $vertical;
        
        return $this;
    }
    
    /**
     * Gets template_type
     *
     * @return string
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }
    
    /**
     * Sets template_type
     *
     * @param string $templateType TemplateType
     *
     * @return $this
     */
    public function setTemplateType($templateType)
    {
        $allowedValues = $this->getTemplateTypeAllowableValues();
        if (!is_null($templateType) && !in_array($templateType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'template_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['template_type'] = $templateType;
        
        return $this;
    }
    
    /**
     * Gets example
     *
     * @return string
     */
    public function getExample()
    {
        return $this->container['example'];
    }
    
    /**
     * Sets example
     *
     * @param string $example example
     *
     * @return $this
     */
    public function setExample($example)
    {
        $this->container['example'] = $example;
        
        return $this;
    }
    
    /**
     * Gets example_media
     *
     * @return string
     */
    public function getExampleMedia()
    {
        return $this->container['example_media'];
    }
    
    /**
     * Sets example_media
     *
     * @param string $exampleMedia example_media
     *
     * @return $this
     */
    public function setExampleMedia($exampleMedia)
    {
        $this->container['example_media'] = $exampleMedia;
        
        return $this;
    }
    
    /**
     * Gets enable_sample
     *
     * @return bool
     */
    public function getEnableSample()
    {
        return $this->container['enable_sample'];
    }
    
    /**
     * Sets enable_sample
     *
     * @param bool $enableSample Must always be true
     *
     * @return $this
     */
    public function setEnableSample($enableSample)
    {
        $this->container['enable_sample'] = $enableSample;
        
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }
    
    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }
    
    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    
    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
    
    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws JsonException
     */
    public function __toString(): string
    {
        $jsonOptions = defined('JSON_PRETTY_PRINT') ? JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR : 0;
        
        return json_encode(ObjectSerializer::sanitizeForSerialization($this), $jsonOptions);
    }
}
