<?php
/**
 * Button
 *
 * PHP version 5
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swagger Leadball messaging service - OpenAPI 3.0
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.25.5
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace sallfris\Leadball\Client\Model;

use ArrayAccess;
use sallfris\Leadball\Client\ObjectSerializer;

/**
 * Button Class Doc Comment
 *
 * @category Class
 * @package  sallfris\Leadball\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Button implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Button';
    
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'button_type' => 'string',
        'text' => 'string',
        'payload' => 'string',
        'url' => 'string',
        'phone' => 'string'];
    
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'button_type' => null,
        'text' => null,
        'payload' => null,
        'url' => null,
        'phone' => null];
    
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }
    
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }
    
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'button_type' => 'buttonType',
        'text' => 'text',
        'payload' => 'payload',
        'url' => 'url',
        'phone' => 'phone'];
    
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'button_type' => 'setButtonType',
        'text' => 'setText',
        'payload' => 'setPayload',
        'url' => 'setUrl',
        'phone' => 'setPhone'];
    
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'button_type' => 'getButtonType',
        'text' => 'getText',
        'payload' => 'getPayload',
        'url' => 'getUrl',
        'phone' => 'getPhone'];
    
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }
    
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }
    
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }
    
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }
    
    const BUTTON_TYPE_QUICK_REPLY = 'QUICK_REPLY';
    const BUTTON_TYPE_URL = 'URL';
    const BUTTON_TYPE_PHONE = 'PHONE';
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getButtonTypeAllowableValues()
    {
        return [
            self::BUTTON_TYPE_QUICK_REPLY,
            self::BUTTON_TYPE_URL,
            self::BUTTON_TYPE_PHONE,];
    }
    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    
    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['button_type'] = isset($data['button_type']) ? $data['button_type'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['payload'] = isset($data['payload']) ? $data['payload'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
    }
    
    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        
        $allowedValues = $this->getButtonTypeAllowableValues();
        if (!is_null($this->container['button_type']) && !in_array(
                $this->container['button_type'],
                $allowedValues,
                true
            )) {
            $invalidProperties[] = sprintf(
                "invalid value for 'button_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }
        
        return $invalidProperties;
    }
    
    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }
    
    
    /**
     * Gets button_type
     *
     * @return string
     */
    public function getButtonType()
    {
        return $this->container['button_type'];
    }
    
    /**
     * Sets button_type
     *
     * @param string $buttonType ButtonType
     *
     * @return $this
     */
    public function setButtonType($buttonType)
    {
        $allowedValues = $this->getButtonTypeAllowableValues();
        if (!is_null($buttonType) && !in_array($buttonType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'button_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['button_type'] = $buttonType;
        
        return $this;
    }
    
    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }
    
    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;
        
        return $this;
    }
    
    /**
     * Gets payload
     *
     * @return string
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }
    
    /**
     * Sets payload
     *
     * @param string $payload payload
     *
     * @return $this
     */
    public function setPayload($payload)
    {
        $this->container['payload'] = $payload;
        
        return $this;
    }
    
    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }
    
    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;
        
        return $this;
    }
    
    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }
    
    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;
        
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }
    
    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }
    
    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }
    
    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }
    
    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return (string) json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }
        
        return (string) json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
